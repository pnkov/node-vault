import { req } from "./req";
import { res } from "./res";

export interface commands {
    status(options: req.Status): Promise<res.Status>;
    initialized(options: req.Initialized): Promise<res.Initialized>;
    init(options: req.Init): Promise<res.Init>;
    unseal(options: req.Unseal): Promise<res.Unseal>;
    seal(options: req.Seal): Promise<res.Seal>;
    generateRootStatus(options: req.GenerateRootStatus): Promise<res.GenerateRootStatus>;
    generateRootInit(options: req.GenerateRootInit): Promise<res.GenerateRootInit>;
    generateRootCancel(options: req.GenerateRootCancel): Promise<res.GenerateRootCancel>;
    generateRootUpdate(options: req.GenerateRootUpdate): Promise<res.GenerateRootUpdate>;
    mounts(options: req.Mounts): Promise<res.Mounts>;
    mount(options: req.Mount): Promise<res.Mount>;
    encryptData(options: req.EncryptData): Promise<res.EncryptData>;
    decryptData(options: req.DecryptData): Promise<res.DecryptData>;
    generateDatabaseCredentials(options: req.GenerateDatabaseCredentials): Promise<res.GenerateDatabaseCredentials>;
    unmount(options: req.Unmount): Promise<res.Unmount>;
    remount(options: req.Remount): Promise<res.Remount>;
    policies(options: req.Policies): Promise<res.Policies>;
    addPolicy(options: req.AddPolicy): Promise<res.AddPolicy>;
    getPolicy(options: req.GetPolicy): Promise<res.GetPolicy>;
    removePolicy(options: req.RemovePolicy): Promise<res.RemovePolicy>;
    auths(options: req.Auths): Promise<res.Auths>;
    enableAuth(options: req.EnableAuth): Promise<res.EnableAuth>;
    disableAuth(options: req.DisableAuth): Promise<res.DisableAuth>;
    audits(options: req.Audits): Promise<res.Audits>;
    enableAudit(options: req.EnableAudit): Promise<res.EnableAudit>;
    disableAudit(options: req.DisableAudit): Promise<res.DisableAudit>;
    renew(options: req.Renew): Promise<res.Renew>;
    revoke(options: req.Revoke): Promise<res.Revoke>;
    revokePrefix(options: req.RevokePrefix): Promise<res.RevokePrefix>;
    rotate(options: req.Rotate): Promise<res.Rotate>;
    unwrap(options: req.Unwrap): Promise<res.Unwrap>;
    gcpLogin(options: req.GcpLogin): Promise<res.GcpLogin>;
    githubLogin(options: req.GithubLogin): Promise<res.GithubLogin>;
    kubernetesLogin(options: req.KubernetesLogin): Promise<res.KubernetesLogin>;
    userpassLogin(options: req.UserpassLogin): Promise<res.UserpassLogin>;
    ldapLogin(options: req.LdapLogin): Promise<res.LdapLogin>;
    oktaLogin(options: req.OktaLogin): Promise<res.OktaLogin>;
    radiusLogin(options: req.RadiusLogin): Promise<res.RadiusLogin>;
    tokenAccessors(options: req.TokenAccessors): Promise<res.TokenAccessors>;
    tokenCreate(options: req.TokenCreate): Promise<res.TokenCreate>;
    tokenCreateOrphan(options: req.TokenCreateOrphan): Promise<res.TokenCreateOrphan>;
    tokenCreateRole(options: req.TokenCreateRole): Promise<res.TokenCreateRole>;
    tokenLookup(options: req.TokenLookup): Promise<res.TokenLookup>;
    tokenLookupAccessor(options: req.TokenLookupAccessor): Promise<res.TokenLookupAccessor>;
    tokenLookupSelf(options: req.TokenLookupSelf): Promise<res.TokenLookupSelf>;
    tokenRenew(options: req.TokenRenew): Promise<res.TokenRenew>;
    tokenRenewSelf(options: req.TokenRenewSelf): Promise<res.TokenRenewSelf>;
    tokenRevoke(options: req.TokenRevoke): Promise<res.TokenRevoke>;
    tokenRevokeAccessor(options: req.TokenRevokeAccessor): Promise<res.TokenRevokeAccessor>;
    tokenRevokeOrphan(options: req.TokenRevokeOrphan): Promise<res.TokenRevokeOrphan>;
    tokenRevokeSelf(options: req.TokenRevokeSelf): Promise<res.TokenRevokeSelf>;
    tokenRoles(options: req.TokenRoles): Promise<res.TokenRoles>;
    addTokenRole(options: req.AddTokenRole): Promise<res.AddTokenRole>;
    getTokenRole(options: req.GetTokenRole): Promise<res.GetTokenRole>;
    removeTokenRole(options: req.RemoveTokenRole): Promise<res.RemoveTokenRole>;
    approleRoles(options: req.ApproleRoles): Promise<res.ApproleRoles>;
    addApproleRole(options: req.AddApproleRole): Promise<res.AddApproleRole>;
    getApproleRole(options: req.GetApproleRole): Promise<res.GetApproleRole>;
    deleteApproleRole(options: req.DeleteApproleRole): Promise<res.DeleteApproleRole>;
    getApproleRoleId(options: req.GetApproleRoleId): Promise<res.GetApproleRoleId>;
    updateApproleRoleId(options: req.UpdateApproleRoleId): Promise<res.UpdateApproleRoleId>;
    getApproleRoleSecret(options: req.GetApproleRoleSecret): Promise<res.GetApproleRoleSecret>;
    approleSecretAccessors(options: req.ApproleSecretAccessors): Promise<res.ApproleSecretAccessors>;
    approleSecretLookup(options: req.ApproleSecretLookup): Promise<res.ApproleSecretLookup>;
    approleSecretDestroy(options: req.ApproleSecretDestroy): Promise<res.ApproleSecretDestroy>;
    approleSecretAccessorLookup(options: req.ApproleSecretAccessorLookup): Promise<res.ApproleSecretAccessorLookup>;
    approleSecretAccessorDestroy(options: req.ApproleSecretAccessorDestroy): Promise<res.ApproleSecretAccessorDestroy>;
    approleLogin(options: req.ApproleLogin): Promise<res.ApproleLogin>;
    health(options: req.Health): Promise<res.Health>;
    leader(options: req.Leader): Promise<res.Leader>;
    stepDown(options: req.StepDown): Promise<res.StepDown>;
}
